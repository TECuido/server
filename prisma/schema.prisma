// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Esquemas de la base de datos preferentemente no tocar
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  idUsuario Int @id @unique @default(autoincrement())
  nombre String @db.VarChar(100)
  correo String @db.VarChar(50) @unique
  password String @db.VarChar(100)
  idTipo Int
  token String? @db.VarChar(64)
  tipo TipoUsuario @relation(fields: [idTipo], references: [idTipo])
  refreshTokens RefreshToken[]
  emergenciasEnviadas Emergencia[] @relation("emisorEmergencia")
  emergenciasRecibidas UsuarioEmergencia[]  @relation("receptorEmergencia")
  usuarioAgrega Contacto[] @relation("usuarioAgrega")
  usuarioAgregado Contacto[] @relation("usuarioAgregado")
  creadorGrupo Grupo[] @relation("usuarioGrupo")
  miembroGrupo UsuarioGrupo[] @relation("miembroGrupo")
  usuarioEmisor Llamada[] @relation("usuarioEmisor")
  usuarioReceptor Llamada[] @relation("usuarioReceptor")
  pacienteReceta Receta[] @relation("pacienteReceta")
  medicoReceta Receta[] @relation("medicoReceta")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model TipoUsuario {
  idTipo Int @id @unique @default(autoincrement())
  nombre String @unique @db.VarChar(30)
  usuario Usuario[] @relation() 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model RefreshToken {
  idToken String @id @unique @default(uuid()) 
  hashedToken String 
  idUsuario Int
  usuario Usuario @relation(fields: [idUsuario], references: [idUsuario], onDelete: Cascade)
  revoked Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Emergencia{
  idEmergencia  Int @id @unique @default(autoincrement())
  tipo String @db.VarChar(100)
  descripcion String? @db.Text
  idEmisor Int
  longitud Float?
  latitud Float? 
  usuarioEmisor Usuario @relation("emisorEmergencia", fields: [idEmisor], references: [idUsuario], onDelete: Cascade)
  emergenciasRecibidas UsuarioEmergencia[] @relation("emergenciaRecibida")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Contacto{
  idContacto Int @id @unique @default(autoincrement())
  idAgrega Int
  usuarioAgrega Usuario @relation("usuarioAgrega", fields: [idAgrega], references: [idUsuario], onDelete: Cascade)
  idAgregado Int
  usuarioAgregado Usuario @relation("usuarioAgregado", fields: [idAgregado], references: [idUsuario], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  @@unique([idAgrega, idAgregado])
}

model Grupo{
  idGrupo Int @id @unique @default(autoincrement())
  nombre String @db.VarChar(150)
  grupo UsuarioGrupo[] @relation("grupo")
  idCreador Int
  creadorGrupo Usuario @relation("usuarioGrupo", fields: [idCreador], references: [idUsuario], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model UsuarioGrupo{
  idContactoGrupo Int @id @unique @default(autoincrement())
  idMiembro Int 
  miembroGrupo Usuario @relation("miembroGrupo", fields: [idMiembro], references: [idUsuario], onDelete: Cascade)
  idGrupo Int 
  grupo Grupo @relation("grupo", fields: [idGrupo], references: [idGrupo], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  @@unique([idMiembro, idGrupo])
}

model UsuarioEmergencia {
  idEmergencia Int
  emergencia Emergencia @relation("emergenciaRecibida", fields: [idEmergencia], references: [idEmergencia], onDelete: Cascade)
  idReceptor Int
  receptorEmergencia Usuario @relation("receptorEmergencia", fields: [idReceptor], references: [idUsuario], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
  @@unique([idReceptor, idEmergencia])
}

model Llamada{
  idLlamada String @id @unique 
  idUsuarioEmisor Int
  usuarioEmisor Usuario @relation("usuarioEmisor", fields: [idUsuarioEmisor], references: [idUsuario], onDelete: Cascade)
  idUsuarioReceptor Int
  usuarioReceptor Usuario @relation("usuarioReceptor", fields: [idUsuarioReceptor], references: [idUsuario], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
}

model Receta {
  idReceta Int @id @unique @default(autoincrement())
  nombre String @db.VarChar(100)
  idPaciente Int 
  idMedico Int?
  fecha DateTime @db.Date
  paciente Usuario @relation("pacienteReceta", fields: [idPaciente], references: [idUsuario], onDelete: Cascade)
  medico Usuario? @relation("medicoReceta", fields: [idMedico], references: [idUsuario], onDelete: Cascade)
  medicamentoReceta MedicamentoReceta[] @relation("medicamentoReceta")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt 
} 

model MedicamentoReceta {
  idMedicamentoReceta Int @id @unique @default(autoincrement()) 
  idReceta Int
  nombre String @db.VarChar(100)
  dosis String @db.VarChar(30)
  frecuencia String @db.VarChar(30)
  duracion String @db.VarChar(30)
  receta Receta @relation("medicamentoReceta", fields: [idReceta], references: [idReceta], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
